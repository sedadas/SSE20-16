package at.ac.tuwien.sse.owaspm5.manager;

import android.app.Activity;
import android.content.Context;
import android.content.SharedPreferences;
import android.util.Base64;
import android.util.Log;

import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

public class AESEncryptionManager implements IEncryptionManager {

    private static final String LOGGING_TAG = AESEncryptionManager.class.getName();

    private static final String PREFERENCES_FILE_KEY = "sp_owasp_m5";
    private static final String KEY_SALT = "salt";
    private static final String KEY_IV = "iv";

    private static final int KEYGEN_ITERATIONS = 1000;
    private static final int KEY_LENGTH = 256;
    private static final String SECRET_KEY_ALGORITHM = "PBKDF2WithHmacSHA1";
    private static final String CIPHER_ALGORITHM = "AES/GCM/NoPadding";
    private static final String STRING_CHARSET = "UTF-8";

    private byte[] salt = new byte[16];
    private byte[] iv;

    private SharedPreferences sharedPrefs;

    public AESEncryptionManager(Activity activity) {
        sharedPrefs = activity.getSharedPreferences(PREFERENCES_FILE_KEY, Context.MODE_PRIVATE);

        // If the salt was never set in the shared preferences, a new salt will be generated and
        // stored.
        String saltString = sharedPrefs.getString(KEY_SALT, null);
        if (saltString == null) {
            SecureRandom secureRandom = new SecureRandom();
            secureRandom.nextBytes(salt);
            setSharedPreferenceBase64(KEY_SALT, salt);
        } else {
            salt = Base64.decode(saltString, Base64.DEFAULT);
        }

        // Gets the initialization vector from the shared preferences.
        String ivString = sharedPrefs.getString(KEY_IV, null);
        if (ivString != null) {
            iv = Base64.decode(ivString, Base64.DEFAULT);
        }
    }

    @Override
    public String encrypt(String data, String password) {
        try {
            byte[] key = generateKey(password);
            byte[] dataByteArray = data.getBytes(STRING_CHARSET);

            SecretKeySpec secretKeySpec = new SecretKeySpec(key, SECRET_KEY_ALGORITHM);
            Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);
            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
            byte[] encrypted = cipher.doFinal(dataByteArray);

            iv = cipher.getIV();
            setSharedPreferenceBase64(KEY_IV, iv);

            return Base64.encodeToString(encrypted, Base64.DEFAULT);
        } catch (Exception exception) {
            Log.e(LOGGING_TAG, "Could not encrypt the data.");
            return null;
        }
    }

    @Override
    public String decrypt(String data, String password) {
        try {
            byte[] key = generateKey(password);
            byte[] dataByteArray = Base64.decode(data, Base64.DEFAULT);

            SecretKeySpec secretKeySpec = new SecretKeySpec(key, SECRET_KEY_ALGORITHM);
            IvParameterSpec parameterSpec = new IvParameterSpec(iv);
            Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);
            cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, parameterSpec);
            byte[] decrypted = cipher.doFinal(dataByteArray);

            return new String(decrypted, STRING_CHARSET);
        } catch (Exception exception) {
            Log.e(LOGGING_TAG, "Could not decrypt the data.");
            return null;
        }
    }

    /**
     * Generates a secret key based on the provided password.
     * @param password The password.
     * @return The secret key.
     */
    private byte[] generateKey(String password) throws NoSuchAlgorithmException, InvalidKeySpecException {
        char[] passwordByteArray = password.toCharArray();

        SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(SECRET_KEY_ALGORITHM);
        KeySpec keySpec = new PBEKeySpec(passwordByteArray, salt, KEYGEN_ITERATIONS, KEY_LENGTH);
        SecretKey secretKey = secretKeyFactory.generateSecret(keySpec);

        return secretKey.getEncoded();
    }

    /**
     * Sets a shared preference for a byte array by encoding to base64.
     * @param key The shared preferences key.
     * @param value The byte array value.
     */
    private void setSharedPreferenceBase64(String key, byte[] value) {
        SharedPreferences.Editor editor = sharedPrefs.edit();
        editor.putString(key, Base64.encodeToString(value, Base64.DEFAULT));
        editor.commit();
    }
}
