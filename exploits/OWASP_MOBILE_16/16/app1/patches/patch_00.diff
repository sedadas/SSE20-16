diff -ruN src/app/app.iml src_patched/app/app.iml
--- src/app/app.iml	2020-05-19 19:30:54.000000000 +0200
+++ src_patched/app/app.iml	2020-05-19 16:35:34.000000000 +0200
@@ -30,15 +30,15 @@
     <output-test url="file://$MODULE_DIR$/build/intermediates/javac/debugUnitTest/classes" />
     <exclude-output />
     <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/aidl_source_output_dir/debug/out" isTestSource="false" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/ap_generated_sources/debug/out" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/aidl_source_output_dir/debug/out" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/renderscript_source_output_dir/debug/out" isTestSource="false" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/androidTest/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/renderscript_source_output_dir/debugAndroidTest/out" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/ap_generated_sources/debugAndroidTest/out" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/aidl_source_output_dir/debugAndroidTest/out" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/androidTest/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/renderscript_source_output_dir/debugAndroidTest/out" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/androidTest/debug" type="java-test-resource" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/ap_generated_sources/debugUnitTest/out" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
diff -ruN src/app/src/main/java/at/ac/tuwien/sse/owaspm5/EnterCreditCardInformationActivity.java src_patched/app/src/main/java/at/ac/tuwien/sse/owaspm5/EnterCreditCardInformationActivity.java
--- src/app/src/main/java/at/ac/tuwien/sse/owaspm5/EnterCreditCardInformationActivity.java	2020-05-19 19:28:28.000000000 +0200
+++ src_patched/app/src/main/java/at/ac/tuwien/sse/owaspm5/EnterCreditCardInformationActivity.java	2020-05-19 21:03:58.000000000 +0200
@@ -10,10 +10,10 @@
 
 import at.ac.tuwien.sse.owaspm5.entities.CreditCardInfo;
 import at.ac.tuwien.sse.owaspm5.exceptions.InternalStorageException;
+import at.ac.tuwien.sse.owaspm5.manager.AESEncryptionManager;
 import at.ac.tuwien.sse.owaspm5.manager.ICreditCardStorageManager;
 import at.ac.tuwien.sse.owaspm5.manager.IEncryptionManager;
 import at.ac.tuwien.sse.owaspm5.manager.InternalCreditCardStorageManager;
-import at.ac.tuwien.sse.owaspm5.manager.OwnEncryptionManager;
 
 public class EnterCreditCardInformationActivity extends AppCompatActivity {
 
@@ -25,11 +25,10 @@
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_enter_credit_card_information);
 
-        encryptionManager = new OwnEncryptionManager();
-
         try {
+            encryptionManager = new AESEncryptionManager(this);
             creditCardStorageManager = new InternalCreditCardStorageManager(this);
-        } catch (InternalStorageException internalStorageException) {
+        } catch (Exception exception) {
             this.finishAndRemoveTask();
         }
         creditCardStorageManager.setEncryptionManager(encryptionManager);
diff -ruN src/app/src/main/java/at/ac/tuwien/sse/owaspm5/MainActivity.java src_patched/app/src/main/java/at/ac/tuwien/sse/owaspm5/MainActivity.java
--- src/app/src/main/java/at/ac/tuwien/sse/owaspm5/MainActivity.java	2020-05-19 19:26:08.000000000 +0200
+++ src_patched/app/src/main/java/at/ac/tuwien/sse/owaspm5/MainActivity.java	2020-05-19 21:03:24.000000000 +0200
@@ -12,11 +12,10 @@
 import android.widget.Toast;
 
 import at.ac.tuwien.sse.owaspm5.entities.CreditCardInfo;
-import at.ac.tuwien.sse.owaspm5.exceptions.InternalStorageException;
+import at.ac.tuwien.sse.owaspm5.manager.AESEncryptionManager;
 import at.ac.tuwien.sse.owaspm5.manager.ICreditCardStorageManager;
 import at.ac.tuwien.sse.owaspm5.manager.IEncryptionManager;
 import at.ac.tuwien.sse.owaspm5.manager.InternalCreditCardStorageManager;
-import at.ac.tuwien.sse.owaspm5.manager.OwnEncryptionManager;
 
 public class MainActivity extends AppCompatActivity {
 
@@ -30,11 +29,10 @@
 
         final Context context = this;
 
-        encryptionManager = new OwnEncryptionManager();
-
         try {
+            encryptionManager = new AESEncryptionManager(this);
             creditCardStorageManager = new InternalCreditCardStorageManager(this);
-        } catch (InternalStorageException internalStorageException) {
+        } catch (Exception exception) {
             this.finishAndRemoveTask();
         }
         creditCardStorageManager.setEncryptionManager(encryptionManager);
diff -ruN src/app/src/main/java/at/ac/tuwien/sse/owaspm5/manager/AESEncryptionManager.java src_patched/app/src/main/java/at/ac/tuwien/sse/owaspm5/manager/AESEncryptionManager.java
--- src/app/src/main/java/at/ac/tuwien/sse/owaspm5/manager/AESEncryptionManager.java	1970-01-01 01:00:00.000000000 +0100
+++ src_patched/app/src/main/java/at/ac/tuwien/sse/owaspm5/manager/AESEncryptionManager.java	2020-05-19 21:53:36.000000000 +0200
@@ -0,0 +1,126 @@
+package at.ac.tuwien.sse.owaspm5.manager;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.util.Base64;
+import android.util.Log;
+
+import java.security.NoSuchAlgorithmException;
+import java.security.SecureRandom;
+import java.security.spec.InvalidKeySpecException;
+import java.security.spec.KeySpec;
+
+import javax.crypto.Cipher;
+import javax.crypto.SecretKey;
+import javax.crypto.SecretKeyFactory;
+import javax.crypto.spec.IvParameterSpec;
+import javax.crypto.spec.PBEKeySpec;
+import javax.crypto.spec.SecretKeySpec;
+
+public class AESEncryptionManager implements IEncryptionManager {
+
+    private static final String LOGGING_TAG = AESEncryptionManager.class.getName();
+
+    private static final String PREFERENCES_FILE_KEY = "sp_owasp_m5";
+    private static final String KEY_SALT = "salt";
+    private static final String KEY_IV = "iv";
+
+    private static final int KEYGEN_ITERATIONS = 1000;
+    private static final int KEY_LENGTH = 256;
+    private static final String SECRET_KEY_ALGORITHM = "PBKDF2WithHmacSHA1";
+    private static final String CIPHER_ALGORITHM = "AES/GCM/NoPadding";
+    private static final String STRING_CHARSET = "UTF-8";
+
+    private byte[] salt = new byte[16];
+    private byte[] iv;
+
+    private SharedPreferences sharedPrefs;
+
+    public AESEncryptionManager(Activity activity) {
+        sharedPrefs = activity.getSharedPreferences(PREFERENCES_FILE_KEY, Context.MODE_PRIVATE);
+
+        // If the salt was never set in the shared preferences, a new salt will be generated and
+        // stored.
+        String saltString = sharedPrefs.getString(KEY_SALT, null);
+        if (saltString == null) {
+            SecureRandom secureRandom = new SecureRandom();
+            secureRandom.nextBytes(salt);
+            setSharedPreferenceBase64(KEY_SALT, salt);
+        } else {
+            salt = Base64.decode(saltString, Base64.DEFAULT);
+        }
+
+        // Gets the initialization vector from the shared preferences.
+        String ivString = sharedPrefs.getString(KEY_IV, null);
+        if (ivString != null) {
+            iv = Base64.decode(ivString, Base64.DEFAULT);
+        }
+    }
+
+    @Override
+    public String encrypt(String data, String password) {
+        try {
+            byte[] key = generateKey(password);
+            byte[] dataByteArray = data.getBytes(STRING_CHARSET);
+
+            SecretKeySpec secretKeySpec = new SecretKeySpec(key, SECRET_KEY_ALGORITHM);
+            Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);
+            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
+            byte[] encrypted = cipher.doFinal(dataByteArray);
+
+            iv = cipher.getIV();
+            setSharedPreferenceBase64(KEY_IV, iv);
+
+            return Base64.encodeToString(encrypted, Base64.DEFAULT);
+        } catch (Exception exception) {
+            Log.e(LOGGING_TAG, "Could not encrypt the data.");
+            return null;
+        }
+    }
+
+    @Override
+    public String decrypt(String data, String password) {
+        try {
+            byte[] key = generateKey(password);
+            byte[] dataByteArray = Base64.decode(data, Base64.DEFAULT);
+
+            SecretKeySpec secretKeySpec = new SecretKeySpec(key, SECRET_KEY_ALGORITHM);
+            IvParameterSpec parameterSpec = new IvParameterSpec(iv);
+            Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);
+            cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, parameterSpec);
+            byte[] decrypted = cipher.doFinal(dataByteArray);
+
+            return new String(decrypted, STRING_CHARSET);
+        } catch (Exception exception) {
+            Log.e(LOGGING_TAG, "Could not decrypt the data.");
+            return null;
+        }
+    }
+
+    /**
+     * Generates a secret key based on the provided password.
+     * @param password The password.
+     * @return The secret key.
+     */
+    private byte[] generateKey(String password) throws NoSuchAlgorithmException, InvalidKeySpecException {
+        char[] passwordByteArray = password.toCharArray();
+
+        SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(SECRET_KEY_ALGORITHM);
+        KeySpec keySpec = new PBEKeySpec(passwordByteArray, salt, KEYGEN_ITERATIONS, KEY_LENGTH);
+        SecretKey secretKey = secretKeyFactory.generateSecret(keySpec);
+
+        return secretKey.getEncoded();
+    }
+
+    /**
+     * Sets a shared preference for a byte array by encoding to base64.
+     * @param key The shared preferences key.
+     * @param value The byte array value.
+     */
+    private void setSharedPreferenceBase64(String key, byte[] value) {
+        SharedPreferences.Editor editor = sharedPrefs.edit();
+        editor.putString(key, Base64.encodeToString(value, Base64.DEFAULT));
+        editor.commit();
+    }
+}
diff -ruN src/app/src/main/res/values/strings.xml src_patched/app/src/main/res/values/strings.xml
--- src/app/src/main/res/values/strings.xml	2020-05-19 14:28:32.000000000 +0200
+++ src_patched/app/src/main/res/values/strings.xml	2020-05-19 19:46:52.000000000 +0200
@@ -1,3 +1,3 @@
 <resources>
-    <string name="app_name">OWASP-M5</string>
+    <string name="app_name">OWASP-M5 (fixed)</string>
 </resources>
